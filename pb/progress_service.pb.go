// Code generated by protoc-gen-go.
// source: progress_service.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NewProgressBarRequest struct {
	StartingProgress uint32 `protobuf:"varint,1,opt,name=startingProgress" json:"startingProgress,omitempty"`
}

func (m *NewProgressBarRequest) Reset()                    { *m = NewProgressBarRequest{} }
func (m *NewProgressBarRequest) String() string            { return proto.CompactTextString(m) }
func (*NewProgressBarRequest) ProtoMessage()               {}
func (*NewProgressBarRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *NewProgressBarRequest) GetStartingProgress() uint32 {
	if m != nil {
		return m.StartingProgress
	}
	return 0
}

type NewProgressBarResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *NewProgressBarResponse) Reset()                    { *m = NewProgressBarResponse{} }
func (m *NewProgressBarResponse) String() string            { return proto.CompactTextString(m) }
func (*NewProgressBarResponse) ProtoMessage()               {}
func (*NewProgressBarResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *NewProgressBarResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NewProgressBarResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ProgressBarStatusRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *ProgressBarStatusRequest) Reset()                    { *m = ProgressBarStatusRequest{} }
func (m *ProgressBarStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*ProgressBarStatusRequest) ProtoMessage()               {}
func (*ProgressBarStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ProgressBarStatusRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ProgressBarStatusResponse struct {
	ProgressBars []*ProgressBar `protobuf:"bytes,1,rep,name=progressBars" json:"progressBars,omitempty"`
}

func (m *ProgressBarStatusResponse) Reset()                    { *m = ProgressBarStatusResponse{} }
func (m *ProgressBarStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ProgressBarStatusResponse) ProtoMessage()               {}
func (*ProgressBarStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ProgressBarStatusResponse) GetProgressBars() []*ProgressBar {
	if m != nil {
		return m.ProgressBars
	}
	return nil
}

func init() {
	proto.RegisterType((*NewProgressBarRequest)(nil), "pb.NewProgressBarRequest")
	proto.RegisterType((*NewProgressBarResponse)(nil), "pb.NewProgressBarResponse")
	proto.RegisterType((*ProgressBarStatusRequest)(nil), "pb.ProgressBarStatusRequest")
	proto.RegisterType((*ProgressBarStatusResponse)(nil), "pb.ProgressBarStatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProgressBarService service

type ProgressBarServiceClient interface {
	NewProgressBar(ctx context.Context, in *NewProgressBarRequest, opts ...grpc.CallOption) (*NewProgressBarResponse, error)
	GetProgressBarStatus(ctx context.Context, in *ProgressBarStatusRequest, opts ...grpc.CallOption) (*ProgressBarStatusResponse, error)
}

type progressBarServiceClient struct {
	cc *grpc.ClientConn
}

func NewProgressBarServiceClient(cc *grpc.ClientConn) ProgressBarServiceClient {
	return &progressBarServiceClient{cc}
}

func (c *progressBarServiceClient) NewProgressBar(ctx context.Context, in *NewProgressBarRequest, opts ...grpc.CallOption) (*NewProgressBarResponse, error) {
	out := new(NewProgressBarResponse)
	err := grpc.Invoke(ctx, "/pb.ProgressBarService/NewProgressBar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressBarServiceClient) GetProgressBarStatus(ctx context.Context, in *ProgressBarStatusRequest, opts ...grpc.CallOption) (*ProgressBarStatusResponse, error) {
	out := new(ProgressBarStatusResponse)
	err := grpc.Invoke(ctx, "/pb.ProgressBarService/GetProgressBarStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProgressBarService service

type ProgressBarServiceServer interface {
	NewProgressBar(context.Context, *NewProgressBarRequest) (*NewProgressBarResponse, error)
	GetProgressBarStatus(context.Context, *ProgressBarStatusRequest) (*ProgressBarStatusResponse, error)
}

func RegisterProgressBarServiceServer(s *grpc.Server, srv ProgressBarServiceServer) {
	s.RegisterService(&_ProgressBarService_serviceDesc, srv)
}

func _ProgressBarService_NewProgressBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProgressBarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressBarServiceServer).NewProgressBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProgressBarService/NewProgressBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressBarServiceServer).NewProgressBar(ctx, req.(*NewProgressBarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressBarService_GetProgressBarStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressBarStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressBarServiceServer).GetProgressBarStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProgressBarService/GetProgressBarStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressBarServiceServer).GetProgressBarStatus(ctx, req.(*ProgressBarStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProgressBarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProgressBarService",
	HandlerType: (*ProgressBarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewProgressBar",
			Handler:    _ProgressBarService_NewProgressBar_Handler,
		},
		{
			MethodName: "GetProgressBarStatus",
			Handler:    _ProgressBarService_GetProgressBarStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "progress_service.proto",
}

func init() { proto.RegisterFile("progress_service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x25, 0x29, 0x0a, 0x1d, 0x35, 0x96, 0xa1, 0x96, 0x34, 0x28, 0x48, 0x4e, 0x45, 0x24, 0x87,
	0xf6, 0xee, 0x41, 0x0f, 0xbd, 0x49, 0x49, 0x3f, 0x40, 0x12, 0x33, 0x94, 0x45, 0xc8, 0xae, 0x3b,
	0x53, 0xfd, 0x2f, 0xbf, 0x50, 0x92, 0x4d, 0x30, 0x69, 0xe2, 0x6d, 0xf7, 0xbd, 0x79, 0x6f, 0xde,
	0xcc, 0xc0, 0xc2, 0x58, 0x7d, 0xb0, 0xc4, 0xfc, 0xc6, 0x64, 0xbf, 0xd4, 0x3b, 0x25, 0xc6, 0x6a,
	0xd1, 0xe8, 0x9b, 0x3c, 0x0a, 0x5a, 0xce, 0x61, 0xf1, 0x0b, 0xdc, 0xbc, 0xd2, 0xf7, 0xae, 0x01,
	0x9f, 0x33, 0x9b, 0xd2, 0xe7, 0x91, 0x58, 0xf0, 0x01, 0x66, 0x2c, 0x99, 0x15, 0x55, 0x1e, 0x5a,
	0x36, 0xf4, 0xee, 0xbd, 0xd5, 0x55, 0x3a, 0xc0, 0xe3, 0x27, 0x58, 0x9c, 0x9a, 0xb0, 0xd1, 0x25,
	0x13, 0x06, 0xe0, 0xab, 0xa2, 0xd6, 0x4d, 0x53, 0x5f, 0x15, 0x38, 0x87, 0x33, 0xd1, 0x1f, 0x54,
	0x86, 0x7e, 0x0d, 0xb9, 0x4f, 0xfc, 0x08, 0x61, 0x47, 0xbc, 0x97, 0x4c, 0x8e, 0xdc, 0xe6, 0x98,
	0xc1, 0x44, 0x15, 0x55, 0xeb, 0xc9, 0x6a, 0x9a, 0x56, 0xcf, 0x78, 0x07, 0xcb, 0x91, 0xea, 0xa6,
	0xe1, 0x06, 0x2e, 0xcd, 0x1f, 0xe9, 0x74, 0x17, 0xeb, 0xeb, 0xc4, 0xe4, 0x49, 0x37, 0x5f, 0xaf,
	0x68, 0xfd, 0xe3, 0x01, 0x76, 0x2d, 0xdd, 0xd6, 0x70, 0x0b, 0x41, 0x7f, 0x2c, 0x5c, 0x56, 0x3e,
	0xa3, 0xfb, 0x8a, 0xa2, 0x31, 0xaa, 0x09, 0xb5, 0x87, 0xf9, 0x96, 0x64, 0x10, 0x1a, 0x6f, 0x4f,
	0x62, 0xf5, 0x26, 0x8f, 0xee, 0xfe, 0x61, 0x9d, 0x69, 0x7e, 0x5e, 0x1f, 0x70, 0xf3, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0xf0, 0x2d, 0xf7, 0x0a, 0xee, 0x01, 0x00, 0x00,
}
